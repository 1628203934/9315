CREATE FUNCTION pname_in(cstring) RETURNS PersonName
   AS '_OBJWD_/pname' LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION pname_out(PersonName) RETURNS cstring
   AS '_OBJWD_/pname' LANGUAGE C IMMUTABLE STRICT;

CREATE TYPE PersonName (
    internallength = variable,
    input = pname_in,
    output = pname_out
);

CREATE FUNCTION pname_lt(PersonName, PersonName) RETURNS bool
   AS '_OBJWD_/pname' LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION pname_le(PersonName, PersonName) RETURNS bool
   AS '_OBJWD_/pname' LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION pname_eq(PersonName, PersonName) RETURNS bool
   AS '_OBJWD_/pname' LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION pname_ne(PersonName, PersonName) RETURNS bool
   AS '_OBJWD_/pname' LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION pname_ge(PersonName, PersonName) RETURNS bool
   AS '_OBJWD_/pname' LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION pname_gt(PersonName, PersonName) RETURNS bool
   AS '_OBJWD_/pname' LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION pname_cmp(PersonName, PersonName) RETURNS int4
   AS '_OBJWD_/pname' LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR < (
   leftarg = PersonName, rightarg = PersonName, procedure = pname_lt,
   commutator = > , negator = >= ,
   restrict = scalarltsel, join = scalarltjoinsel
);

CREATE OPERATOR <= (
   leftarg = PersonName, rightarg = PersonName, procedure = pname_le,
   commutator = >= , negator = > ,
   restrict = scalarlesel, join = scalarlejoinsel
);

CREATE OPERATOR = (
   leftarg = PersonName, rightarg = PersonName, procedure = pname_eq,
   commutator = = , negator = <> ,
   restrict = eqsel, join = eqjoinsel
);

CREATE OPERATOR <> (
   leftarg = PersonName, rightarg = PersonName, procedure = pname_ne,
   commutator = <> , negator = = ,
   restrict = neqsel, join = neqjoinsel
);

CREATE OPERATOR >= (
   leftarg = PersonName, rightarg = PersonName, procedure = pname_ge,
   commutator = <= , negator = < ,
   restrict = scalargesel, join = scalargejoinsel
);

CREATE OPERATOR > (
   leftarg = PersonName, rightarg = PersonName, procedure = pname_gt,
   commutator = < , negator = <= ,
   restrict = scalargtsel, join = scalargtjoinsel
);

CREATE FUNCTION family(PersonName) RETURNS text
   AS '_OBJWD_/pname' LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION given(PersonName) RETURNS text
   AS '_OBJWD_/pname' LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION show(PersonName) RETURNS text
   AS '_OBJWD_/pname' LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION pname_hash(PersonName) RETURNS int4
   AS '_OBJWD_/pname' LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR CLASS pname_btree_ops
    DEFAULT FOR TYPE PersonName USING btree AS
        OPERATOR        1       <  (PersonName, PersonName),
        OPERATOR        2       <= (PersonName, PersonName),
        OPERATOR        3       =  (PersonName, PersonName),
        OPERATOR        4       >= (PersonName, PersonName),
        OPERATOR        5       >  (PersonName, PersonName),
	    FUNCTION        1       pname_cmp(PersonName, PersonName);

CREATE OPERATOR CLASS pname_hash_ops
    DEFAULT FOR TYPE PersonName USING hash AS
        OPERATOR        1       = ,
        FUNCTION        1       pname_hash(PersonName);
